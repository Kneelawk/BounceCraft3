import com.modrinth.minotaur.dependencies.DependencyType
import com.modrinth.minotaur.dependencies.ModDependency

plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'io.github.juuxel.loom-quiltflower'
    id 'com.modrinth.minotaur'
    id 'com.matthewprenger.cursegradle'
}

String releaseTag = System.getenv("RELEASE_TAG")
if (releaseTag != null) {
    project.version = releaseTag.substring(1)
    println("Detected Release Version: " + project.version)
} else {
    project.version = project.mod_version
    println("Detected Local Version: " + project.version)
}

group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated-res")}"
            vmArg "-Dfabric-api.datagen.modid=${modid}"

            runDir "build/datagen"
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs += ["src/main/generated-res"]
        }
    }
}

repositories {
    maven {
        name = "AlexIIL"
        url = "https://maven.alexiil.uk/"
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases/"
    }
    maven {
        name = "Cafeteria"
        url = "https://maven.cafeteria.dev/releases/"
    }
    maven {
        name = "Kneelawk"
        url = "https://kneelawk.com/maven/"
    }
    mavenLocal()
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // LibMultiPart
    modImplementation "alexiil.mc.lib:libmultipart-all:${project.lmp_version}"
    include "alexiil.mc.lib:libmultipart-all:${project.lmp_version}"

    // KModLib
    modImplementation "com.kneelawk:kmodlib-all:${project.kmodlib_version}"
    include "com.kneelawk:kmodlib-all:${project.kmodlib_version}"

    // Mod Menu
    modLocalRuntime "com.terraformersmc:modmenu:${project.mod_menu_version}"
    // EMI
    if (project.emi_enabled.toBoolean()) {
        modLocalRuntime "dev.emi:emi-fabric:${project.emi_version}"
    }
}

processResources {
    inputs.property "version", project.version

    exclude("**/*.xcf")

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = 17
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}" }
    }
}

modrinth {
    token = System.getenv("MODRINTH_TOKEN")
    projectId = project.mr_project_id
    versionNumber = project.version as String
    versionType = project.mr_version_type
    File changelogFile = file("changelogs/changelog-v${project.version}.md")
    if (changelogFile.exists()) {
        changelog = changelogFile.text
    }
    uploadFile = tasks.remapJar
    additionalFiles.add(tasks.sourcesJar)
    gameVersions.addAll(project.mr_game_versions.split("\\s*,\\s*"))
    loaders.addAll(project.mr_loaders.split("\\s*,\\s*"))
    dependencies.add(new ModDependency("P7dR8mSH", DependencyType.REQUIRED)) // Fabric API
    syncBodyFrom = file("README.md").text
}

String curseApiKey = System.getenv("CURSE_API_KEY")
if (curseApiKey != null) {
    curseforge {
        apiKey = curseApiKey
        project {
            id = project.cf_project_id
            changelogType = "markdown"
            changelog = file("changelogs/changelog-v${project.version}.md")
            releaseType = project.cf_release_type
            for (final def version in project.cf_minecraft_versions.split("\\s*,\\s*")) {
                addGameVersion(version)
            }
            mainArtifact(tasks.remapJar)
            addArtifact(tasks.sourcesJar)
            relations {
                requiredDependency("fabric-api")
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }

    afterEvaluate {
        tasks.curseforge881218.dependsOn(tasks.remapJar)
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (System.getenv("PUBLISH_REPO") != null) {
            maven {
                name = "publishRepo"
                url = uri(System.getenv("PUBLISH_REPO"))
            }
        }
    }
}

afterEvaluate {
    tasks.named("genSources") {
        dependsOn = ["genSourcesWithQuiltflower"]
    }
}
